<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
// TIMINGS
const int B_stop = 18;
const int B_rest = 24 - B_stop;

const int AWAIT_VALID_COLOR     =  8;
const int ADVANCE_BEYOND_SENSOR =  8 + B_stop;
const int LONG_PATH_WAIT_TIME   = 97 + B_rest;
const int SHORT_PATH_WAIT_TIME  = 40 + B_rest;

const int ENTER_INTERSECTION_TIME = (6 + 24 + 27) - (6 + 28);
const int LEAVE_INTERSECTION_TIME = (6 + 28 + 33 + 24) - (6);

// UTILITY
urgent broadcast chan go;

// CONTROLLER
const int FEEDS = 2;
typedef int[0,FEEDS-1] F_id;

// BAGS
const int BAGS = 8;
typedef int[0,BAGS-1] t_id;
int[0,1] isblack[BAGS];

// COLOR
int[0,255] current_Color;
broadcast chan colorUpdated;
chan arrived;

urgent chan checkIn[FEEDS][BAGS];
clock lastCheckinA, lastCheckinB;

// USER
const int USERS = 2;
typedef int[0,USERS-1] U_id;
int[0,BAGS] bag;

// SectionA
typedef int[0,FEEDS-1] A_id;
chan A_enter[FEEDS], A_leave[FEEDS];
t_id A_bag[FEEDS];

// MOTORS 
const int MOTORS = 3;
typedef int[0,MOTORS-1] M_id;

chan M_forward[MOTORS], M_stop[MOTORS], M_reverse[MOTORS], M_backward[MOTORS];
bool M_fwd[MOTORS], M_run[MOTORS];

// SENSORS
const int SENSORS = 2;
typedef int[0,SENSORS-1] S_id;
typedef int[0,80]  t_sensor;

chan S_activate[SENSORS], S_passivate[SENSORS], S_readValue[SENSORS];
urgent broadcast chan S_notifyAll[SENSORS];
bool S_lightOn[SENSORS];
t_sensor S_input[SENSORS], S_output[SENSORS];

// LOCKS

// SimpleLock
const int SLOCKS = 2;
typedef int[0,SLOCKS-1] SL_id;

chan SL_lock[SLOCKS];
bool SL_locked[SLOCKS];
const int SL_waitTime[SLOCKS] = {
    LEAVE_INTERSECTION_TIME - ENTER_INTERSECTION_TIME,
    LEAVE_INTERSECTION_TIME - ENTER_INTERSECTION_TIME
};

// DirectionLock
bool DL_locked;
chan DL_lockLong, DL_lockShort;
const int DL_longWait = LONG_PATH_WAIT_TIME;
const int DL_shortWait = SHORT_PATH_WAIT_TIME;</declaration>
	<template>
		<name>ColorUpdater</name>
		<declaration>int noOfBags=0, i;

void updateColors() {
    if (current_Color == 255) {
        current_Color=0;
    } else {
        current_Color++;
    }
    for (i = 0; i &lt; BAGS; i++) {
        isblack[i]=(current_Color &amp; (1&lt;&lt;i))&gt;&gt;i;
    }
}</declaration>
		<location id="id0" x="255" y="0">
			<name x="245" y="-34">Update</name>
			<committed/>
		</location>
		<location id="id1" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="59" y="119">colorUpdated!</label>
			<nail x="204" y="136"/>
			<nail x="25" y="136"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="59" y="-34">noOfBags==BAGS-1</label>
			<label kind="synchronisation" x="59" y="-17">arrived?</label>
			<label kind="assignment" x="59" y="0">noOfBags:=0,
updateColors()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-212" y="-34">noOfBags &lt; BAGS-1</label>
			<label kind="synchronisation" x="-127" y="-17">arrived?</label>
			<label kind="assignment" x="-238" y="0">noOfBags := noOfBags + 1</label>
			<nail x="-68" y="68"/>
			<nail x="-68" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Bag</name>
		<parameter>t_id id</parameter>
		<declaration>clock x;
clock handling;
bool dir;

bool isBlack() { return isblack[id]; }
bool isYellow() { return !isBlack(); }</declaration>
		<location id="id2" x="-408" y="-680">
			<name x="-418" y="-714">Updating</name>
		</location>
		<location id="id3" x="-408" y="-136" color="#ffffff">
			<committed/>
		</location>
		<location id="id4" x="-238" y="-612" color="#ffffff">
			<committed/>
		</location>
		<location id="id5" x="-578" y="-612" color="#ffffff">
			<committed/>
		</location>
		<location id="id6" x="-238" y="-306">
			<name x="-340" y="-323">C2</name>
			<label kind="invariant" x="-340" y="-306">x&lt;28</label>
		</location>
		<location id="id7" x="-578" y="-306">
			<name x="-544" y="-323">C1</name>
			<label kind="invariant" x="-544" y="-306">x&lt;28</label>
		</location>
		<location id="id8" x="-578" y="-136">
			<name x="-586" y="-119">D1</name>
			<label kind="invariant" x="-595" y="-102">x&lt;=24</label>
		</location>
		<location id="id9" x="-408" y="-204">
			<name x="-416" y="-119">F</name>
			<label kind="invariant" x="-425" y="-102">x&lt;=33</label>
		</location>
		<location id="id10" x="-238" y="-136">
			<name x="-246" y="-119">D2</name>
			<label kind="invariant" x="-255" y="-102">x&lt;=24</label>
		</location>
		<location id="id11" x="-714" y="-170">
			<name x="-722" y="-119">E1</name>
			<label kind="invariant" x="-731" y="-102">x&lt;=12</label>
		</location>
		<location id="id12" x="-102" y="-170">
			<name x="-110" y="-119">E2</name>
			<label kind="invariant" x="-119" y="-102">x&lt;=12</label>
		</location>
		<location id="id13" x="-714" y="-357" color="#ffa500">
			<name x="-731" y="-340">Stop1</name>
		</location>
		<location id="id14" x="-102" y="-459" color="#ffffff">
			<committed/>
		</location>
		<location id="id15" x="-714" y="-459" color="#ffffff">
			<committed/>
		</location>
		<location id="id16" x="-102" y="-357" color="#ffa500">
			<name x="-119" y="-340">Stop2</name>
		</location>
		<location id="id17" x="-408" y="-612">
			<name x="-425" y="-595">Initial</name>
		</location>
		<location id="id18" x="-34" y="-170" color="#00ff00">
			<name x="-93" y="-221">Dest_B</name>
			<committed/>
		</location>
		<location id="id19" x="-238" y="-204" color="#ffffff">
			<committed/>
		</location>
		<location id="id20" x="-578" y="-204" color="#ffffff">
			<committed/>
		</location>
		<location id="id21" x="-782" y="-170" color="#00ff00">
			<name x="-773" y="-221">Dest_A</name>
			<committed/>
		</location>
		<location id="id22" x="-238" y="-510">
			<name x="-340" y="-527">A2</name>
		</location>
		<location id="id23" x="-578" y="-510">
			<name x="-544" y="-527">A1</name>
		</location>
		<location id="id24" x="-238" y="-409">
			<name x="-340" y="-442">B2</name>
			<label kind="invariant" x="-340" y="-425">x&lt;=24</label>
		</location>
		<location id="id25" x="-578" y="-408">
			<name x="-544" y="-442">B1</name>
			<label kind="invariant" x="-544" y="-425">x&lt;=24</label>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id2"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-408" y="-663">colorUpdated?</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-25" y="-263">arrived!</label>
			<label kind="assignment" x="-25" y="-238">lastCheckinB:=0</label>
			<nail x="-34" y="-680"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-850" y="-255">arrived!</label>
			<label kind="assignment" x="-901" y="-238">lastCheckinA:=0</label>
			<nail x="-782" y="-680"/>
			<nail x="-484" y="-680"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id10"/>
			<label kind="guard" x="-391" y="-161">!M_fwd[2]</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id8"/>
			<label kind="guard" x="-476" y="-161">M_fwd[2]</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-340" y="-595">A_enter[1]!</label>
			<label kind="assignment" x="-340" y="-578">A_bag[1]:=id,
x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-544" y="-595">A_enter[0]!</label>
			<label kind="assignment" x="-544" y="-578">A_bag[0]:=id,
x:=0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id12"/>
			<label kind="guard" x="-221" y="-229">!M_fwd[2]</label>
			<nail x="-170" y="-204"/>
			<nail x="-153" y="-170"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id9"/>
			<label kind="guard" x="-306" y="-229">M_fwd[2]</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id9"/>
			<label kind="guard" x="-561" y="-229">!M_fwd[2]</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id11"/>
			<label kind="guard" x="-646" y="-229">M_fwd[2]</label>
			<nail x="-646" y="-204"/>
			<nail x="-663" y="-170"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id19"/>
			<label kind="guard" x="-340" y="-289">x&gt;=24</label>
			<label kind="assignment" x="-340" y="-272">x:=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id20"/>
			<label kind="guard" x="-544" y="-289">x&gt;=24</label>
			<label kind="assignment" x="-544" y="-272">x:=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id3"/>
			<label kind="guard" x="-425" y="-85">x&gt;=27</label>
			<label kind="assignment" x="-425" y="-68">x:=0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="guard" x="-595" y="-85">x&gt;=23</label>
			<label kind="assignment" x="-595" y="-68">x:=0</label>
			<nail x="-646" y="-136"/>
			<nail x="-663" y="-170"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-255" y="-85">x&gt;=23</label>
			<label kind="assignment" x="-255" y="-68">x:=0</label>
			<nail x="-170" y="-136"/>
			<nail x="-153" y="-170"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id21"/>
			<label kind="guard" x="-731" y="-85">x&gt;=10</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id18"/>
			<label kind="guard" x="-119" y="-85">x&gt;=10</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id25"/>
			<label kind="guard" x="-663" y="-382">M_run[0]</label>
			<label kind="synchronisation" x="-689" y="-382">go!</label>
			<label kind="assignment" x="-688" y="-357">x:=B_stop</label>
			<nail x="-612" y="-357"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id15"/>
			<label kind="guard" x="-663" y="-484">!M_run[0]</label>
			<label kind="synchronisation" x="-688" y="-484">go!</label>
			<nail x="-612" y="-459"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="guard" x="-705" y="-425">x==B_stop</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="guard" x="-178" y="-425">x==B_stop</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id24"/>
			<label kind="guard" x="-178" y="-382">M_run[1]</label>
			<label kind="synchronisation" x="-203" y="-382">go!</label>
			<label kind="assignment" x="-195" y="-357">x:=B_stop</label>
			<nail x="-204" y="-357"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id14"/>
			<label kind="guard" x="-178" y="-484">!M_run[1]</label>
			<label kind="synchronisation" x="-204" y="-484">go!</label>
			<nail x="-204" y="-459"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-340" y="-637">checkIn[1][id]?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-544" y="-637">checkIn[0][id]?</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-340" y="-510">A_leave[1]?</label>
			<label kind="assignment" x="-340" y="-493">x:=0,
handling:=0</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-544" y="-510">A_leave[0]?</label>
			<label kind="assignment" x="-544" y="-493">x:=0,
handling:=0</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id6"/>
			<label kind="guard" x="-340" y="-408">x&gt;=24</label>
			<label kind="assignment" x="-340" y="-391">x:=0,
dir:=M_fwd[2]</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id7"/>
			<label kind="guard" x="-544" y="-408">x&gt;=24</label>
			<label kind="assignment" x="-544" y="-391">x:=0,
dir:=M_fwd[2]</label>
		</transition>
	</template>
	<template>
		<name>DirectionLock</name>
		<declaration>clock x;

const int DL_startShort = DL_longWait - DL_shortWait;</declaration>
		<location id="id26" x="-204" y="0">
			<committed/>
		</location>
		<location id="id27" x="-34" y="0">
			<name x="-17" y="-42">Locked</name>
			<label kind="invariant" x="-17" y="-25">x&lt;=DL_longWait</label>
		</location>
		<location id="id28" x="-340" y="0">
			<name x="-382" y="-42">Free</name>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-161" y="-17">DL_lockShort?</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-17" y="8">DL_lockLong?</label>
			<label kind="assignment" x="76" y="8">x:=0</label>
			<nail x="-17" y="34"/>
			<nail x="110" y="34"/>
			<nail x="110" y="0"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-170" y="17">x&gt;DL_startShort</label>
			<label kind="assignment" x="-170" y="34">x:=DL_startShort</label>
			<nail x="-187" y="-34"/>
			<nail x="-51" y="-34"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-170" y="-51">x&lt;=DL_startShort</label>
			<nail x="-187" y="34"/>
			<nail x="-51" y="34"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-323" y="-17">DL_lockShort?</label>
			<label kind="assignment" x="-323" y="0">DL_locked:=true, 
x:=DL_startShort</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="-323" y="68">x &gt;= DL_longWait</label>
			<label kind="assignment" x="-204" y="68">DL_locked:=false</label>
			<nail x="-34" y="68"/>
			<nail x="-340" y="68"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-323" y="-85">DL_lockLong?</label>
			<label kind="assignment" x="-221" y="-85">DL_locked:=true, x:=0</label>
			<nail x="-340" y="-68"/>
			<nail x="-34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>SimpleLock</name>
		<parameter>SL_id id</parameter>
		<declaration>clock x;</declaration>
		<location id="id29" x="68" y="0">
			<name x="93" y="-59">Locked</name>
			<label kind="invariant" x="93" y="-42">x&lt;=SL_waitTime[id]</label>
		</location>
		<location id="id30" x="-102" y="0">
			<name x="-144" y="-34">Free</name>
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="110" y="0">SL_lock[id]?</label>
			<label kind="assignment" x="110" y="17">x:=0</label>
			<nail x="102" y="0"/>
			<nail x="102" y="34"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-85" y="34">x &gt;= SL_waitTime[id]</label>
			<label kind="assignment" x="-85" y="51">SL_locked[id]:=false</label>
			<nail x="51" y="34"/>
			<nail x="-85" y="34"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-84" y="-76">SL_lock[id]?</label>
			<label kind="assignment" x="-85" y="-59">SL_locked[id]:=true, x:=0</label>
			<nail x="-85" y="-34"/>
			<nail x="51" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Feeder</name>
		<parameter>F_id id</parameter>
		<declaration>clock y, z;

bool dirA, destA;
bool feederA() { return id == 0; }

bool isShortPath() { return destA == feederA(); }
bool isLongPath() { return !isShortPath(); }

bool isClear (int v) { return v &gt;  70 || v ==  0; }
bool isYellow(int v) { return v &gt;= 50 &amp;&amp; v &lt;= 60; }
bool isBlack (int v) { return v &gt;= 35 &amp;&amp; v &lt;= 45; }</declaration>
		<location id="id31" x="-884" y="-544">
			<committed/>
		</location>
		<location id="id32" x="-952" y="-612">
			<committed/>
		</location>
		<location id="id33" x="-884" y="-476">
			<name x="-1028" y="-484">Await_Simple_Lock</name>
		</location>
		<location id="id34" x="-884" y="-374">
			<committed/>
		</location>
		<location id="id35" x="-952" y="-238">
			<committed/>
		</location>
		<location id="id36" x="-748" y="-476">
			<committed/>
		</location>
		<location id="id37" x="-612" y="-476">
			<name x="-595" y="-493">Await_Start_Intersection</name>
			<label kind="invariant" x="-595" y="-510">y&lt;=ENTER_INTERSECTION_TIME</label>
		</location>
		<location id="id38" x="-748" y="-374">
			<committed/>
		</location>
		<location id="id39" x="-612" y="-374">
			<committed/>
		</location>
		<location id="id40" x="-680" y="-306">
			<committed/>
		</location>
		<location id="id41" x="-816" y="-102">
			<name x="-833" y="-85">Await_Direction_Lock</name>
		</location>
		<location id="id42" x="-544" y="-612">
			<name x="-586" y="-663">Polling_Sensor</name>
		</location>
		<location id="id43" x="-680" y="-612">
			<committed/>
		</location>
		<location id="id44" x="-816" y="-612">
			<committed/>
		</location>
		<location id="id45" x="-340" y="-340">
			<committed/>
		</location>
		<location id="id46" x="-340" y="-408">
			<committed/>
		</location>
		<location id="id47" x="-340" y="-238">
			<name x="-315" y="-264">Advance_Beyond_Sensor</name>
			<label kind="invariant" x="-314" y="-238">y&lt;=ADVANCE_BEYOND_SENSOR</label>
		</location>
		<location id="id48" x="-340" y="-510">
			<name x="-315" y="-544">Await_Valid_Color</name>
			<label kind="invariant" x="-323" y="-485">y&lt;=AWAIT_VALID_COLOR</label>
		</location>
		<location id="id49" x="-816" y="-238">
			<committed/>
		</location>
		<location id="id50" x="-680" y="-102">
			<committed/>
		</location>
		<location id="id51" x="-680" y="-238">
			<committed/>
		</location>
		<location id="id52" x="-544" y="-238">
			<committed/>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id31"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-850" y="-535">M_forward[id]!</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id49"/>
			<label kind="guard" x="-807" y="-204">M_fwd[2] == destA</label>
			<label kind="synchronisation" x="-807" y="-187">go!</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-926" y="-637">M_forward[2]!</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id31"/>
			<label kind="guard" x="-986" y="-518">!SL_locked[id]</label>
			<label kind="synchronisation" x="-1012" y="-518">go!</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-960" y="-433">M_stop[id]!</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id34"/>
			<label kind="guard" x="-841" y="-399">SL_locked[id]</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id35"/>
			<label kind="guard" x="-1105" y="-170">!DL_locked &amp;&amp; M_fwd[2] != destA</label>
			<label kind="synchronisation" x="-1130" y="-170">go!</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id43"/>
			<label kind="guard" x="-595" y="-527">y==ENTER_INTERSECTION_TIME</label>
			<label kind="synchronisation" x="-595" y="-544">SL_lock[1-id]!</label>
			<nail x="-612" y="-544"/>
			<nail x="-680" y="-544"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-790" y="-569">DL_lockShort!</label>
			<nail x="-748" y="-544"/>
			<nail x="-680" y="-544"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id36"/>
			<label kind="guard" x="-850" y="-442">!SL_locked[id]</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-595" y="-442">DL_lockLong!</label>
			<label kind="assignment" x="-595" y="-425">y:=0</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id38"/>
			<label kind="guard" x="-841" y="-340">isShortPath()</label>
			<nail x="-748" y="-306"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-603" y="-340">isLongPath()</label>
			<nail x="-612" y="-306"/>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id40"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id52"/>
			<label kind="guard" x="-314" y="-221">y==ADVANCE_BEYOND_SENSOR</label>
			<label kind="assignment" x="-518" y="-229">dirA:=M_fwd[2]</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-510" y="-637">S_notifyAll[id]?</label>
			<label kind="assignment" x="-510" y="-612">y:=0</label>
			<nail x="-340" y="-612"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-654" y="-637">S_activate[id]!</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-773" y="-637">M_forward[id]!</label>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-323" y="-306">S_passivate[id]!</label>
			<label kind="assignment" x="-323" y="-323">destA:=isYellow(S_output[id])</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-323" y="-391">S_readValue[id]!</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id46"/>
			<label kind="guard" x="-323" y="-468">y==AWAIT_VALID_COLOR</label>
			<label kind="assignment" x="-323" y="-451">y:=0</label>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-782" y="-264">M_forward[id]!</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-926" y="-263">M_reverse[2]!</label>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-782" y="-127">M_stop[id]!</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id50"/>
			<label kind="guard" x="-646" y="-128">dirA !=destA</label>
			<nail x="-544" y="-102"/>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="guard" x="-654" y="-264">dirA == destA</label>
		</transition>
	</template>
	<template>
		<name>SectionA</name>
		<parameter>A_id id</parameter>
		<declaration>clock x;

bool isBlack() { return isblack[A_bag[id]]; }
bool isYellow() { return !isBlack(); }

void update(int value) { S_input[id] = value; }</declaration>
		<location id="id53" x="0" y="-204" color="#ffffff">
			<committed/>
		</location>
		<location id="id54" x="-136" y="-306">
			<name x="-153" y="-340">Ready</name>
		</location>
		<location id="id55" x="0" y="0">
			<name x="-77" y="8">A_3</name>
			<label kind="invariant" x="-85" y="25">x&lt;=16</label>
		</location>
		<location id="id56" x="0" y="-102">
			<name x="42" y="-93">A_2</name>
			<label kind="invariant" x="34" y="-76">x&lt;=14</label>
		</location>
		<location id="id57" x="0" y="-306">
			<name x="34" y="-289">A_1</name>
			<label kind="invariant" x="34" y="-272">x&lt;=2</label>
		</location>
		<init ref="id54"/>
		<transition>
			<source ref="id53"/>
			<target ref="id56"/>
			<label kind="guard" x="42" y="-170">isYellow()</label>
			<label kind="assignment" x="42" y="-153">update(55)</label>
			<nail x="34" y="-204"/>
			<nail x="34" y="-102"/>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id56"/>
			<label kind="guard" x="-110" y="-170">isBlack()</label>
			<label kind="assignment" x="-110" y="-153">update(40)</label>
			<nail x="-34" y="-204"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id57"/>
			<label kind="synchronisation" x="-102" y="-331">A_enter[id]?</label>
			<label kind="assignment" x="-102" y="-306">x:=0,
update(65)</label>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id54"/>
			<label kind="guard" x="-85" y="42">x&gt;=16</label>
			<label kind="synchronisation" x="-85" y="59">A_leave[id]!</label>
			<label kind="assignment" x="-85" y="76">update(75)</label>
			<nail x="-136" y="0"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id55"/>
			<label kind="guard" x="34" y="-59">x&gt;=14</label>
			<label kind="assignment" x="34" y="-42">update(65)</label>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id53"/>
			<label kind="guard" x="34" y="-255">x&gt;=2</label>
		</transition>
	</template>
	<template>
		<name>LightSensor</name>
		<parameter>S_id id</parameter>
		<declaration>bool hasNotified;

bool shouldNotify() { return !hasNotified &amp;&amp; S_input[id] &gt; 0 &amp;&amp; S_input[id] &lt; 75; }</declaration>
		<location id="id58" x="-68" y="-68">
			<name x="-17" y="-127">Active</name>
		</location>
		<location id="id59" x="-306" y="-68">
			<name x="-399" y="-127">Passive</name>
		</location>
		<init ref="id59"/>
		<transition>
			<source ref="id58"/>
			<target ref="id58"/>
			<label kind="guard" x="-8" y="-93">shouldNotify()</label>
			<label kind="synchronisation" x="-8" y="-76">S_notifyAll[id]!</label>
			<label kind="assignment" x="-8" y="-59">hasNotified:=true</label>
			<nail x="-17" y="-102"/>
			<nail x="-17" y="-34"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="-102" y="-17">S_readValue[id]?</label>
			<label kind="assignment" x="-102" y="0">S_output[id]:=S_input[id]</label>
			<nail x="-34" y="-17"/>
			<nail x="-102" y="-17"/>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id59"/>
			<label kind="synchronisation" x="-357" y="-17">S_readValue[id]?</label>
			<label kind="assignment" x="-357" y="0">S_output[id]:=0</label>
			<nail x="-272" y="-17"/>
			<nail x="-340" y="-17"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="-93" y="-144">S_activate[id]?</label>
			<nail x="-102" y="-119"/>
			<nail x="-34" y="-119"/>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id59"/>
			<label kind="synchronisation" x="-357" y="-144">S_passivate[id]?</label>
			<nail x="-340" y="-119"/>
			<nail x="-272" y="-119"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id59"/>
			<label kind="synchronisation" x="-238" y="-59">S_passivate[id]?</label>
			<label kind="assignment" x="-238" y="-34">S_lightOn[id]:=false,
hasNotified:=false</label>
			<nail x="-102" y="-34"/>
			<nail x="-272" y="-34"/>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="-238" y="-127">S_activate[id]?</label>
			<label kind="assignment" x="-238" y="-102">S_lightOn[id]:=true</label>
			<nail x="-272" y="-102"/>
			<nail x="-102" y="-102"/>
		</transition>
	</template>
	<template>
		<name>User</name>
		<parameter>U_id id</parameter>
		<declaration>clock x;

int updateBag() { 
    if (bag == BAGS-1) { 
        return 0; 
    }
    return bag + 1;
}</declaration>
		<location id="id60" x="-238" y="-34">
			<label kind="invariant" x="-212" y="-34">x &lt;= 5</label>
		</location>
		<location id="id61" x="-102" y="-34">
		</location>
		<location id="id62" x="-102" y="68">
		</location>
		<location id="id63" x="-238" y="68">
		</location>
		<init ref="id63"/>
		<transition>
			<source ref="id60"/>
			<target ref="id61"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id62"/>
			<label kind="synchronisation" x="-85" y="17">checkIn[id][bag]!</label>
			<label kind="assignment" x="-85" y="1">bag := updateBag()</label>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id63"/>
			<label kind="guard" x="-195" y="42">!S_lightOn[id]</label>
			<label kind="synchronisation" x="-221" y="42">go!</label>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id60"/>
			<label kind="guard" x="-204" y="0">S_lightOn[id]</label>
			<label kind="synchronisation" x="-229" y="0">go!</label>
			<label kind="assignment" x="-229" y="17">x:=0</label>
		</transition>
	</template>
	<template>
		<name>Motor</name>
		<parameter>M_id id</parameter>
		<location id="id64" x="-136" y="0">
			<name x="-153" y="-51">Stop</name>
		</location>
		<location id="id65" x="68" y="0">
			<name x="76" y="-51">Backward</name>
		</location>
		<location id="id66" x="-340" y="0">
			<name x="-399" y="-51">Forward</name>
		</location>
		<init ref="id64"/>
		<transition>
			<source ref="id64"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="-170" y="42">M_stop[id]?</label>
			<nail x="-85" y="68"/>
			<nail x="-187" y="68"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-221" y="110">M_forward[id]?</label>
			<label kind="assignment" x="-119" y="110">M_fwd[id]:=true</label>
			<nail x="68" y="136"/>
			<nail x="-340" y="136"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-229" y="-136">M_backward[id]?</label>
			<label kind="assignment" x="-119" y="-136">M_fwd[id]:=false</label>
			<nail x="-340" y="-136"/>
			<nail x="68" y="-136"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="85" y="-25">M_backward[id]?</label>
			<nail x="170" y="0"/>
			<nail x="119" y="34"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-442" y="-25">M_forward[id]?</label>
			<nail x="-442" y="0"/>
			<nail x="-391" y="34"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="-272" y="8">M_stop[id]?</label>
			<label kind="assignment" x="-289" y="34">M_run[id]:=false</label>
			<nail x="-306" y="34"/>
			<nail x="-170" y="34"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="-59" y="8">M_stop[id]?</label>
			<label kind="assignment" x="-76" y="34">M_run[id]:=false</label>
			<nail x="34" y="34"/>
			<nail x="-102" y="34"/>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-289" y="-59">M_forward[id]?</label>
			<label kind="assignment" x="-289" y="-34">M_fwd[id]:=true,
M_run[id]:=true</label>
			<nail x="-170" y="-34"/>
			<nail x="-306" y="-34"/>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-76" y="-59">M_backward[id]?</label>
			<label kind="assignment" x="-76" y="-34">M_fwd[id]:=false,
M_run[id]:=true</label>
			<nail x="-102" y="-34"/>
			<nail x="34" y="-34"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-221" y="76">M_reverse[id]?</label>
			<label kind="assignment" x="-119" y="76">M_fwd[id]:=true</label>
			<nail x="68" y="102"/>
			<nail x="-340" y="102"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-221" y="-102">M_reverse[id]?</label>
			<label kind="assignment" x="-119" y="-102">M_fwd[id]:=false</label>
			<nail x="-340" y="-102"/>
			<nail x="68" y="-102"/>
		</transition>
	</template>
	<system>system ColorUpdater, Bag, Feeder, DirectionLock, SimpleLock, SectionA, LightSensor, User, Motor;     </system>
	<queries>
		<query>
			<formula>A[] forall(i:t_id) Bag(i).Dest_A imply lastCheckinA &gt;= 14
			</formula>
			<comment>Bags should be at least 1.4 seconds apart on the distribution belt to avoid bumping.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Bag(i).Dest_B imply lastCheckinB &gt;= 14
			</formula>
			<comment>Bags should be at least 1.4 seconds apart on the distribution belt to avoid bumping.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (Bag(i).A1 or Bag(i).C1) imply M_run[0]
			</formula>
			<comment>The feed belts are not stopped when carrying a bag is outside of section b).
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (Bag(i).A2 or Bag(i).C2) imply M_run[1]
			</formula>
			<comment>The feed belts are not stopped when carrying a bag is outside of section b).
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (Bag(i).C1 or Bag(i).C2 or Bag(i).D1 or Bag(i).D2 or Bag(i).E1 or Bag(i).E2 or Bag(i).F) imply M_run[2] &amp;&amp; Bag(i).dir == M_fwd[2]
			</formula>
			<comment>The distribution belt is never stopped or reversed when it carries a bag.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Bag(i).Dest_A imply Bag(i).isYellow()
			</formula>
			<comment>Safety: Yellow bags are delivered at destination A.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Bag(i).Dest_B imply Bag(i).isBlack()
			</formula>
			<comment>Safety: Black bags are delivered at destination B.
			</comment>
		</query>
		<query>
			<formula>(Bag(0).A1 or Bag(0).A2) --&gt; Bag(0).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(1).A1 or Bag(1).A2) --&gt; Bag(1).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(2).A1 or Bag(2).A2) --&gt; Bag(2).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(3).A1 or Bag(3).A2) --&gt; Bag(3).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(4).A1 or Bag(4).A2) --&gt; Bag(4).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(5).A1 or Bag(5).A2) --&gt; Bag(5).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(6).A1 or Bag(6).A2) --&gt; Bag(6).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>(Bag(7).A1 or Bag(7).A2) --&gt; Bag(7).Initial
			</formula>
			<comment>Activity: A bag will arrive at a destination
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Bag(i).C1 imply Bag(i).dir == M_fwd[2]
			</formula>
			<comment>When a bag arrives at section C then the direction of the distribution belt is the same as the desired direction of the bag.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) Bag(i).C2 imply Bag(i).dir == M_fwd[2]
			</formula>
			<comment>When a bag arrives at section C then the direction of the distribution belt is the same as the desired direction of the bag.
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system never deadlocks.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) Bag(i).C1 &amp;&amp; Bag(j).D1 imply false
			</formula>
			<comment>Bags must not be be simultaneously present in sections c) and d) belonging to the same feed belt to avoid collisions.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) forall(j:t_id) Bag(i).C2 &amp;&amp; Bag(j).D2 imply false
			</formula>
			<comment>Bags must not be be simultaneously present in sections c) and d) belonging to the same feed belt to avoid collisions.
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (Bag(i).Dest_A or Bag(i).Dest_B) imply Bag(i).handling &gt;= 58
			</formula>
			<comment>Query for determining the minimal handling time e.g. a bag that follows the shortest path to the destination. Based on the model the minimal handling time is 2.4 + 2.4 +1.0 = 5.8 seconds
			</comment>
		</query>
		<query>
			<formula>A[] forall(i:t_id) (Bag(i).Dest_A or Bag(i).Dest_B) imply Bag(i).handling &lt;= 936
			</formula>
			<comment>Query to verify that each individual bag will not exceed a handling time of 12.0 seconds. The worst case handling time will be 93.6 seconds, which can be determined by assuming that all bags needs to follow the long path to their destination. 
If one bag has a different color than the rest and one of the other manages to pass the sensor before it then the processing time for 8 * 12.0 - the travel time to past the stop position (2.4) = 93.6 seconds
			</comment>
		</query>
		<query>
			<formula>A[] Bag(0).A1 + Bag(0).A2 + Bag(0).B1 + Bag(0).B2 + Bag(0).C1 + Bag(0).C2 + Bag(0).D1 + Bag(0).D2 + Bag(0).E1 + Bag(0).E2 + Bag(0).F + 
Bag(1).A1 + Bag(1).A2 + Bag(1).B1 + Bag(1).B2 + Bag(1).C1 + Bag(1).C2 + Bag(1).D1 + Bag(1).D2 + Bag(1).E1 + Bag(1).E2 + Bag(1).F + 
Bag(2).A1 + Bag(2).A2 + Bag(2).B1 + Bag(2).B2 + Bag(2).C1 + Bag(2).C2 + Bag(2).D1 + Bag(2).D2 + Bag(2).E1 + Bag(2).E2 + Bag(2).F +
Bag(3).A1 + Bag(3).A2 + Bag(3).B1 + Bag(3).B2 + Bag(3).C1 + Bag(3).C2 + Bag(3).D1 + Bag(3).D2 + Bag(3).E1 + Bag(3).E2 + Bag(3).F +
Bag(4).A1 + Bag(4).A2 + Bag(4).B1 + Bag(4).B2 + Bag(4).C1 + Bag(4).C2 + Bag(4).D1 + Bag(4).D2 + Bag(4).E1 + Bag(4).E2 + Bag(4).F +
Bag(5).A1 + Bag(5).A2 + Bag(5).B1 + Bag(5).B2 + Bag(5).C1 + Bag(5).C2 + Bag(5).D1 + Bag(5).D2 + Bag(5).E1 + Bag(5).E2 + Bag(5).F +
Bag(6).A1 + Bag(6).A2 + Bag(6).B1 + Bag(6).B2 + Bag(6).C1 + Bag(6).C2 + Bag(6).D1 + Bag(6).D2 + Bag(6).E1 + Bag(6).E2 + Bag(6).F +
Bag(7).A1 + Bag(7).A2 + Bag(7).B1 + Bag(7).B2 + Bag(7).C1 + Bag(7).C2 + Bag(7).D1 + Bag(7).D2 + Bag(7).E1 + Bag(7).E2 + Bag(7).F &lt;= 5
			</formula>
			<comment>Query to determine the maximum amount bags that can be on both the feedbelts and the distribution belt. Defined for only 8 bags. 
Maximum amount of bags is 5, since there can be one bag at location A1, one at A2, one at C1, one at C2 and one somewhere on the distribution belt
			</comment>
		</query>
		<query>
			<formula>Motor(0).Stop or Motor(0).Forward --&gt; (not Motor(0).Backward)
			</formula>
			<comment>Query checks that the motor for feed belt 1 does not reach the Backward state. Motor(0) represents feed belt 1.
			</comment>
		</query>
		<query>
			<formula>Motor(1).Stop or Motor(1).Forward --&gt; (not Motor(1).Backward)
			</formula>
			<comment>Query checks that the motor for feed belt 2 does not reach the Backward state. Motor(0) represents feed belt 2.
			</comment>
		</query>
		<query>
			<formula>Motor(2).Stop --&gt; ((Motor(2).Forward or Motor(2).Backward) and not Motor(2).Stop)
			</formula>
			<comment>This query checks ensures that the distribution belt (Motor 2) does not return to the Stop after being activated.
			</comment>
		</query>
	</queries>
</nta>
